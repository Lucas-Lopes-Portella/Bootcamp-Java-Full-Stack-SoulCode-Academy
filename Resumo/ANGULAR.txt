*** TYPESCRIPT ***


npm i -g typescript  |--> instalar typescript

tsc -v --> tsc -v  |--> versão do typescript

tsc ARQUIVO.TS   |--> transformar .ts em .js

tsc --init   |-->  

tsc -w  |--> atualizar arquivo.js em tempo real





*** ANGULAR ***

npm install -g @angular/cli  |--> instalar angular

g –version  |--> versao do angular

ng new <nome-do-projeto>  |--> criar projeto angular

ng serve  |-->   iniciar no navegador  |--> localhost:4200

ng generate component <nome-do-componente> OU ng g c <nome-do-componente>  |--> criar componente

ng generate directive minha-diretiva OU  ng g d minha-diretiva  |--> criar diretiva

ng generate pipe array-sum OU ng g p array-sum  |--> criar pipe

ng g m material  |--> criar módulo material 

ng add @angular/material  |--> adicionar o angular material

ng generate inteface OU ng g i |--> criar interface

ng generate service products OU ng g s products  |--> gerar service 



PROPERTY BINDING |--> atrela valores de atributos do componente aos atributos de um elemento HTML ou algum outro componente.
SINTAXE: [propriedade] = 'atributoDoComponente'
EX: 
(TS) simbolos: string[] = ['+', '-']
(HTML)  <input type="button" [value]="simbolos[1]">




STRING INTERPOLATION |--> utilizado para interpolar valores das propriedades do componente dentro dotemplate HTML
SINTAXE: {{ atributo }}
EX: 
(TS) texto: string = 'Hello World'
(HTML) <p> {{ texto}} </p>






EVENT BINDING |--> executa eventos nativos do HTML ou eventos que podem ser criados pelo programador,executando algum método do componente
SINTAXE: (nomeDoEvento)="metodoDoComponente()"
EX: 
(TS) decrementar(): void{
    	this.contador--
     }
(HTML) <input type="button" [value]="simbolos[1]" (click)="decrementar()">






TWO WAY DATA BINDING |--> além do valor do atributo ser apresentado na tela do usuário, caso o valor seja editado em algum campo de input, o valor será automaticamente alterado internamente no componente
SINTAXE ex: 
(app.module.ts)	  
import { FormsModule } from '@angular/forms';
 imports: [
	FormsModule
  ],

(TS componente) 
texto: string = '';  


(HTML componente) 
<form action="text">
  <input 
  [(ngModel)]='texto' 
  type="text"
  name="name"
  id="name"
  placeholder="Digite aqui">
</form>
<p>Texto digitado: {{texto}} </p>







INPUT BINDING |--> transforma a propriedade de um componente em um atributo HTML
SINTAXE: 
(TS) 
import { Input } ....  

@Input()
background: string = '';

(HTML)
<p [style]="`background-color: ${background};`"> p com a cor {{background}} </p>

(HTML OUTRO COMPONENTE)
<meu-componente [background]="'red'"> </meu-componente>






EVENT EMITTERS |--> emitir eventos de um componente para ooutro
SINTAXE: 
(TS) 
import { Output, EventEmitter } ....  

@Output()
meuEvento: EventEmitter<any> = new EventEmitter<any>();

emitirEventoPersonalizado(){
      this.meuEvento.emit();
}


(HTML OUTRO COMPONENTE)
<meu-component (meuEvento)="f()"></meu-component>







TEMPLATE VARIABLES |--> variáveis que oangular nos permite definir dentro dos elementos HTML do template do seu component
SINTAXE: #variavel
<input type='text' placeholder="digite um valor" #in>
<p>O valor digitado no input acima é {{in.value}} </p>




VIEW CHILD  |--> similar a Template Variables, porém o View Child fica dentro do arquivo Typescript do component
SINTAXE EX:
 (TS)	
@ViewChild('templateTest')
  helloWorld!: ElementRef<HTMLParagraphElement>;

  ngAfterViewInit(){
    setTimeout(
      () =>{
        this.helloWorld.nativeElement.innerText = 'Test View Child + Template Variables'
      }, 3000
      )
  }

 (HTML) 
<p #templateTest> 
    Olá mundo!
</p>





DIRETIVAS


ngStyle -->  serve para alterar em tempo real valores de propriedades de CSS dentro de um elemento HTML ou componente.
SINTAXE EX: 
<p [ngStyle]="{color:colorParagraph, border: '4px groove MediumBlue', fontWeight:'bolder', fontSize:'30px', fontFamily:'sans-serif' ,margin: 'auto', padding: '5px', backgroundColor:'DarkTurquoise', width:'400px', height:'100px', display:'flex',alignItems:'center', justifyContent:'center'}">
	ng-style works!
</p>



ngClass --> pode receber um objeto como valor, onde os atributos desse objeto serão nome das classes e os valores alguma expressão booleana que se verdadeira, adicionará a classe, se falsa, não adicionará.
SINTAXE: EX
 (TS) 
character:number = 50;
 updateCharacter(cNumber:number):void {
    this.character = cNumber;
  }

 (HTML)
<textarea  cols="30" rows="5" placeholder="digite aqui" maxlength="50" #txtArea (input)="updateCharacter(-txtArea.value.length+50)"></textarea>

<span [ngClass]="{
    sucess: character>25,
    alert: character <=25 && character >=11,
    danger: character <=10
}">{{character}}</span>



ngIf --> a partir de uma condição booleana, pode ou não adicionar elementos a DOM
SINTAXE: *ngIf=”expressaoBooleana”
EX: 
 <!-- NG IF + NG TEMPLATE -->

    <p *ngIf="checkTrue.checked===true; else altFalse">Marcado</p>

    <input type="checkbox" checked="true" (input)="checkTrue" #checkTrue>
    <label for="">Mostrar/Remover parágrafo</label>

    <ng-template #altFalse>
        <p>
            <strong>
                <i>Desmarcado</i>
            </strong>
        </p>
    </ng-template>
<hr>


ngFor --> 
SINTAXE: *ngFor=”letvalueofvalues; let idx = index”
EX:
 (TS)  names:Array<string> = ['Lucas', 'Amanda', 'Fernanda', 'Rafael', 'Matheus','Ana'];
 (HTML)
<table border=1>
    <tr>
        <th>
            Names
        </th>
    </tr>
    <ng-container *ngFor="let name of names; let idx = index">
        <tr *ngIf="name.length>4">
           <td> {{name}} </td>
        </tr>
    </ng-container>
</table>



ngSwitchCase --> 3partes:
ngSwitch, ngSwitchCase e ngSwitchDefault, onde o ngSwitch recebe o atributo que será testado, ngSwitchCase receberá o valor que tornará o case verdadeiro e o ngSwitchDefault será um elemento padrão que será renderizado caso nenhum dos cases for verdadeiro
SINTAXE ex:

 (TS) 
color:string = 'black';
changeColor(newColor:string):void{
    this.color = newColor;
  }

 (HTML)
 <div [ngSwitch]="color">
    <p *ngSwitchCase="'red'" style="color:red">RED</p>
    <p *ngSwitchCase="'orange'" style="color:orange">ORANGE</p>
    <p *ngSwitchCase="'yellow'" style="color:yellow">YELLOW</p>
    <P *ngSwitchDefault>BLACK</P>
</div>





CICLO DE VIDA

1º) ngOnChanges --> executado uma vez na criação do componente e sempre que houver alterações nos valores dos Inputs, informando qual o valor antigo, qual o valor atual e se foi a primeira vez que aquela propriedade foi alterada.

2º) 


 // CICLOS DE VIDA 
  // 1º 
  ngOnChanges(changes: SimpleChanges): void{
    console.log('%cngOnChanges executado!','font-size:20px; color: red;');
    if(changes['appSaldo'].previousValue !=undefined){
      this.saldoAnterior = changes['appSaldo'].previousValue
    } else {
      this.saldoAnterior = 'Saldo não informado';
    }
  }

  //2º
  ngOnInit(): void {
    console.log('%cngOnInit executado!','font-size:20px; color: red;');
    console.log(this.appSaldo);
  }

  //3º
  ngDoCheck(): void {
    console.log('%cngDoChecked executado!', 'font-size: 20px; color: red;')
  }

  //4º
  ngAfterContentInit():void{
    console.log('%cngAfterContentInit executado!', 'font-size: 20px; color: red;')
  }

  //5º
  ngOnDestroy(): void {
    console.log('%cngOnDestroy executado!', 'font-size: 20px; color: green;')
  }




PIPES 
SINTAXE: {{propriedade|nomeDoPipe}}
ex:
{{propriedade | lowercase}}
{{propriedade | uppercase}} 
{{object | json}}
{{propriedade | date: ...}}  --> https://angular.io/api/common/DatePipe



ANGULAR MATERIAL

passo 1: ng g m material --> criar módulo material
passo 2: ng add @angular/material --> baixar o material

passo 3: incluir no material.module.ts:
import { NgModule } from '@angular/core'

//material
import { MatAutocompleteModule } from '@angular/material/autocomplete'
import { MatBadgeModule } from '@angular/material/badge'
import { MatButtonModule } from '@angular/material/button'
import { MatButtonToggleModule } from '@angular/material/button-toggle'
import { MatCardModule } from '@angular/material/card'
import { MatCheckboxModule } from '@angular/material/checkbox'
import { MatChipsModule } from '@angular/material/chips'
import { MatCommonModule } from '@angular/material/core'
import { MatDatepickerModule } from '@angular/material/datepicker'
import { MatDialogModule } from '@angular/material/dialog'
import { MatDividerModule } from '@angular/material/divider'
import { MatExpansionModule } from '@angular/material/expansion'
import { MatFormFieldModule } from '@angular/material/form-field'
import { MatGridListModule } from '@angular/material/grid-list'
import { MatIconModule } from '@angular/material/icon'
import { MatInputModule } from '@angular/material/input'
import { MatListModule } from '@angular/material/list'
import { MatMenuModule } from '@angular/material/menu'
import { MatPaginatorModule } from '@angular/material/paginator'
import { MatProgressBarModule } from '@angular/material/progress-bar'
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner'
import { MatRadioModule } from '@angular/material/radio'
import { MatRippleModule } from '@angular/material/core'
import { MatSelectModule } from '@angular/material/select'
import { MatSidenavModule } from '@angular/material/sidenav'
import { MatSlideToggleModule } from '@angular/material/slide-toggle'
import { MatSliderModule } from '@angular/material/slider'
import { MatSnackBarModule } from '@angular/material/snack-bar'
import { MatSortModule } from '@angular/material/sort'
import { MatStepperModule } from '@angular/material/stepper'
import { MatTableModule } from '@angular/material/table'
import { MatTabsModule } from '@angular/material/tabs'
import { MatToolbarModule } from '@angular/material/toolbar'
import { MatTreeModule } from '@angular/material/tree'

@NgModule({
  exports: [
    MatAutocompleteModule,
    MatBadgeModule,
    MatButtonModule,
    MatButtonToggleModule,
    MatCardModule,
    MatCheckboxModule,
    MatChipsModule,
    MatCommonModule,
    MatDatepickerModule,
    MatDialogModule,
    MatDividerModule,
    MatExpansionModule,
    MatFormFieldModule,
    MatGridListModule,
    MatIconModule,
    MatInputModule,
    MatListModule,
    MatMenuModule,
    MatPaginatorModule,
    MatProgressBarModule,
    MatProgressSpinnerModule,
    MatRadioModule,
    MatRippleModule,
    MatSelectModule,
    MatSidenavModule,
    MatSlideToggleModule,
    MatSliderModule,
    MatSnackBarModule,
    MatSortModule,
    MatStepperModule,
    MatTableModule,
    MatTabsModule,
    MatToolbarModule,
    MatTreeModule
  ]
})
export class MaterialModule {

}


PASSO 4: (app.module.ts)
import { MaterialModule } from './material/material.module';
imports: [MaterialModule]


PASSO 5:  SINTAXE ex:
(TS)
 forms=[
      {
        name: 'Lucas',
        lastName: 'Lopes',
        photo: 'https://picsum.photos/102',
        description: "It's me, a little prince "
      },
      {
        name: 'Amanda',
        lastName: 'Beak',
        photo: 'https://picsum.photos/104',
        description: "It's me, a little princess "
      }
    ]

(HTML)

<div class="container">
    <mat-card *ngFor="let form of forms">
        <mat-card-header>
            <mat-card-title>
                {{form.name}}
            </mat-card-title>
            <mat-card-subtitle>
                {{form.lastName}}
            </mat-card-subtitle>
        </mat-card-header>
        <mat-card-content>
            <img src={{form.photo}} alt="picsum">
        </mat-card-content>
        <mat-card-footer>
            {{form.description}} 
        </mat-card-footer>
    </mat-card>
</div>









FORMULÁRIOS

TEMPLATE DRIVEN FORMS
(app.module.ts)
import { FormsModule } from '@angular/forms';
imports: [
    FormsModule
]

(TS)
user: User = {
    name: '',
    username: '',
    email: '',
    password: '',
    acceptTermsAndConditions: true,
    genre: '' 
  }


(HTML)
<mat-toolbar color="warn">
    <mat-toolbar-row>
        <h1>REGISTER</h1>
    </mat-toolbar-row>
</mat-toolbar>

<div class="container">
    <mat-card>
        <mat-card-header>
            <mat-card-title>
                Your data
            </mat-card-title>
        </mat-card-header>

        <mat-card-content>
            <form action="" #userForm="ngForm" (ngSubmit)="saveUser()">
                <mat-form-field appearance="fill">
                    <mat-label>Name</mat-label>
                    <input 
                    type="text" 
                    matInput [(ngModel)]="user.name" 
                    name="nameField" 
                    required 
                    #inputName="ngModel">
                   <mat-error><span>Required field</span></mat-error>
                </mat-form-field>
                <mat-form-field appearance="fill">
                    <mat-label>Username</mat-label>
                    <input type="text" matInput [(ngModel)]="user.username" name="userNameField" required>
                    <mat-error><span>Required field</span></mat-error>
                </mat-form-field>
                <mat-form-field appearance="fill">
                    <mat-label>Email</mat-label>
                    <input type="email" matInput [(ngModel)]="user.email" name="emailField"  required
                    email>
                    <mat-error><span>Required field</span></mat-error>
                </mat-form-field>
                <mat-form-field appearance="fill">
                    <mat-label>Password</mat-label>
                    <input type="password" matInput [(ngModel)]="user.password" name="passwordField" minlength="6" required #inputPassword="ngModel">
                    <mat-error>
                       <!--  <span *ngIf="inputPassword.errors?.['required']" >Required field</span> -->
                       <span *ngIf="inputPassword.getError('required')" >Required field</span>


                        <!-- <span *ngIf="inputPassword.errors?.['minlength']" >Password must be at least 6 characters long</span> -->
                        
                        <span *ngIf="inputPassword.getError('minlength')" >Password must be at least 6 characters long</span>

                    </mat-error>
                </mat-form-field>

                <mat-radio-group aria-label="Select an option" [(ngModel)]="user.genre" name="genreField"  required>
                    <mat-radio-button value="M">Male</mat-radio-button>
                    <mat-radio-button value="F">Female</mat-radio-button>
                    <mat-radio-button value="O">Other</mat-radio-button>
                    
                </mat-radio-group>
            
                <section>
                    <mat-checkbox [(ngModel)]="user.acceptTermsAndConditions" name="acceptTermsAndConditionsField" required="">
                        Accept <a href="#"> Terms and conditions</a>
                    </mat-checkbox>
                </section>
                
               <button type="submit" mat-stroked-button="link" [disabled]="userForm.invalid">Register</button>
            </form>
        </mat-card-content>
    </mat-card>


</div>


OBS: Na tag form é incluida a templave variable #variavel="ngForm" ... nos campos necessários é obrigatória a inclusão dos termos --> [(ngModel)]="propriedade" e name="nome"
OPCIONAL: #inputName="ngModel" --> informa que o campo input pode ser controlado para fazer validação







REVISAR A NOITE ----










REACTIVE FORMS
PASSO I: 
(app.module.ts)
import { ReactiveFormsModule} from '@angular/forms';
imports: [
    ReactiveFormsModule
]
 
CONCEITOS
Form Control -->  Os Form Controls são elementos do Reactive Forms que controlam um único elemento do formulário. Seja um input,um select, ou qualquer outro elemento.

(TS) 
import {FormControl} from '@angular/forms';
username: FormControl = new FormControl('')

(HTML) 
<input type="text" id="username" [formControl] = "username">


FormGroup --> agrupar dois ou mais Form Controls e, até mesmo, outros Form Groups

(TS) 
import {FormControl, FormGroup} from '@angular/forms';

formUser: FormGroup = new FormGroup({
    name:new FormControl(''),
    username:new FormControl(''),
    email:new FormControl(''),
    password: new FormControl(''),
    genre: new FormControl(''),
    acceptTermsAndConditionsField:new FormControl(true)
  });


(HTML) 
<form action="" [formGroup] = "formUser">
...
<input type="text" name="nameField" formControlName="name"> 
...
...
<mat-radio-group name="genreField" formControlName="genre">
 <mat-radio-button value="M">Masculino</mat-radio-button>
            <mat-radio-button value="F">Feminino</mat-radio-button>
</mat-radio-group>
...
...
  <mat-checkbox name="acceptTermsAndConditionsField" formControlName="acceptTermsAndConditionsField">
              Aceito os <a href="#">Terms and conditions</a>
            </mat-checkbox>




OBS: dentro da tag <form> colocar [FormGroup] = "nomeObjetoFormGroupDoArquivoTS"
nas tags dentro do <form> colocar o formControlName="nomeDoObjetoControlNameDentroDoObjetoFormGroupDoArquivoTS"
Validator: dentro dos parametros dos form controls



FORM ARRAY + FORM BUILDER
(TS)

import { Component, OnInit } from '@angular/core';
import { FormArray, FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';

@Component({
  selector: 'app-reactive-forms',
  templateUrl: './reactive-forms.component.html',
  styleUrls: ['./reactive-forms.component.css']
})
export class ReactiveFormsComponent implements OnInit {

  formUsuario: FormGroup = this.fb.group({
    nome: ['', [ Validators.required ]],
    username: ['', [ Validators.required, Validators.minLength(8) ]],
    email: ['', [ Validators.required, Validators.email ]],
    senha: ['', [ Validators.required, Validators.minLength(8) ]],
    genero: ['', [ Validators.required ]],
    termos: [false, [ Validators.requiredTrue ]],
    telefones: this.fb.array([
      this.fb.control('', [ Validators.required ]),
      this.fb.control('', [ Validators.required ])
    ])
  })

  tels: FormArray = this.formUsuario.get('telefones') as FormArray

  constructor(
    private fb: FormBuilder

  ) { }

  ngOnInit(): void {
  }

  enviar(): void {
    console.log(this.formUsuario.value) // retorna apenas os valores digitados nos campos
    console.log(this.formUsuario.controls) // retorna todos os dados dos campos

    // this.formUsuario.reset() // reseta todos os campos
  }

  adicionarCampoTelefone(): void {
    this.tels.controls.push(this.fb.control('', [ Validators.required ]))
  }
}



HTML

<mat-toolbar color="accent">
  <mat-toolbar-row>
    <h1>ReactiveFormsModule</h1>
  </mat-toolbar-row>
</mat-toolbar>
<div class="container">
  <mat-card>
    <mat-card-header>
      <mat-card-title>Seus dados</mat-card-title>
    </mat-card-header>
    <mat-card-content>
      <form action="" [formGroup]="formUsuario" (ngSubmit)="enviar()">
        <mat-form-field appearance="outline">
          <mat-label>Nome</mat-label>
          <input
            type="text"
            matInput
            name="campo-nome"
            formControlName="nome"
          >
          <mat-error></mat-error>
        </mat-form-field>

        <mat-form-field appearance="outline">
          <mat-label>Username</mat-label>
          <input
            type="text"
            matInput
            name="campo-username"
            formControlName="username"
          >
        </mat-form-field>

        <mat-form-field appearance="outline">
          <mat-label>Email</mat-label>
          <input
            type="email"
            matInput
            name="campo-email"
            formControlName="email"
          >
        </mat-form-field>

        <mat-form-field appearance="outline">
          <mat-label>Senha</mat-label>
          <input
            type="password"
            matInput
            name="campo-senha"
            formControlName="senha"
          >
          <mat-error>
            <span *ngIf="formUsuario.get('senha')?.getError('required')">
              Este campo é obrigatório
            </span>
            <span *ngIf="formUsuario.get('senha')?.getError('minlength')">
              Este campo deve ter no mínimo 8 caracteres
            </span>
          </mat-error>
        </mat-form-field>

        <mat-radio-group name="campo-gen" formControlName="genero">
          <mat-radio-button value="masc">Masculino</mat-radio-button>
          <mat-radio-button value="femi">Feminino</mat-radio-button>
          <mat-radio-button value="outro">Outro</mat-radio-button>
        </mat-radio-group>

        <section formArrayName="telefones">
          <mat-form-field appearance="outline" *ngFor="let campoTel of tels.controls; let i = index">
            <mat-label>Telefone</mat-label>
            <input
              type="tel"
              matInput
              name="telefone"
              [formControlName]="i"
            >
          </mat-form-field>
          <button mat-raised-button color="warn" type="button" (click)="adicionarCampoTelefone()">
            <mat-icon>add</mat-icon>
          </button>
        </section>

        <section>
          <mat-checkbox name="input-termos" formControlName="termos">
            Aceito os <a href="#">Termos de condições</a>
          </mat-checkbox>
        </section>

        <button
          type="submit"
          mat-stroked-button
          color="warn"
          [disabled]="formUsuario.invalid"
        >Registrar</button>
      </form>
    </mat-card-content>
  </mat-card>
</div>





SERVICES 
Service é um pedaço de código reutilizável com um propósito específico.

Vantagens de utilizar os Services:
1.Recursos independentes de componentes
2.Compartilhamento de lógica entre os elementos da aplicação
3.Encapsulamento de interações externas
4.Maior facilidade para testar5.Fácil de depurar (debug)


I) Gerar service 
ng generate service products OU ng g s products

II) Métodos importantes: 
import { Injectable } from @'Angular/core';

@Injectable({
     provideIn:'root'
})


//A propriedade providedIn do Injectable informa onde que o Service será fornecido. Por padrão,o valor do providedIn é root.Esse valor informa que esse Serviço será fornecido a partir do módulo principal (app.module.ts) e toda a aplicação terá acesso ao Serviço.
//provideIn:'COMPONENTE' // IMPORTAR COMPONENTE // Provedor para componente específico

Outra forma de importar o serviço 
(TS)
import { CLASSE DO SERVIÇO} from 'CAMINHO DO SERVIÇO';
providers: [
	CLASSE DO SERVIÇO;
]


III) IMPLEMENTAÇÃO
(TS)
import { ProductsService } from './products.service';
.
.
.
constructor(
 private pService: ProductService
){}

ngOnInit(){
    this.pService.getAllProducts().forEach(console.log);
}









CRIAR API FAKE (ROUTERS)
I) npm init -y (criar projeto node)

II) Instalar JSON Server
npm i json-server 	

III) em package.json colocar em "scripts":{ }
"serve": "json-server --watch database.json"


IV)  Rodar o servidor
npm run serve

V) Abrir aplicação 
http://localhost:3000


VI) Criar um projeto angular fora da pasta da API
Dar y no roteamento do projeto

VII) Criar módulo de roteamento para funcionarios<ex>
ng g m employees --routing  (módulo + routing)

ESTRUTURA ROUTERS (Principal)
(app.module.ts)
import { AppRoutingModule } from './app-routing.module';
imports: [
    AppRoutingModule
]

(app-routing.module.ts)
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';

//array de rotas
const routes: Routes = [];

@NgModule({
   // forRoot -- é da rota principal
  // forRoot -- configura as rotas do módulo principal do roteamento e carrega elas
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule { }


ESTRUTURA ROUTERS (Secundários)

import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';

const routes: Routes = [];

@NgModule({

//forChild é para rotas secundárias
  imports: [RouterModule.forChild(routes)],
  exports: [RouterModule]
})
export class EmployeesRoutingModule { }



VIII) em employees-routing.modules.ts
Inserir: pathMatch: 'full'; // impede que a página entre em loop // necessário apenas quando o path: '' é vazio


IX) (app-routing.module.ts)
//array de rotas
// localhost:4200/employees
const routes: Routes = [
  {
    path: 'employees',
    loadChildren: ()=> import('./employees/employees.module').then(m => m.EmployeesModule)

    // Lazy Loadings
  },
  {
    path:'',
    pathMatch:'full',
    redirectTo:'employees'
  }
];

 
X)  Criar pasta models e uma interface employee

ng generate interface funcionarios/models/funcionario
export interface Employee{
    id?:number
    name: string
    email: string
    foto: string
}


XI) TABELA list-employes.component


XII) REQUISIÇÃO HTTP
(component.module.ts)
import { HttpClientModule } from '@angular/common/http';
imports: [
HttpClientModule
]

(componente.service.ts)
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { Employee } from '../models/employee';

@Injectable({
  providedIn: 'root',
})
export class EmployeeService {
  private readonly baseUrl: string = 'http://localhost:3000/employees';
  constructor(private http: HttpClient) {}

  getEmployees(): Observable<Employee[]> {
    return this.http.get<Employee[]>(this.baseUrl);
  }
}



(componente.component.ts)






RXJS (ReactiveExtensionforJavaScript)
biblioteca utilizada internamente pelo Angular para trabalhar com a reatividade.

ORXJSnospermiteutilizarumaestruturachamadaobservables,queécomelaquefazemosareatividade.Comoopróprionomedeixaclaro,osobservablesobservamasalteraçõesdealgum determinado dado e fazem algo sempre que essa alteração acontece.

- OBSERVABLES
CRIAR UM OBSERVABLE
(TS)
import {Observable} from 'rxjs';
export class AppComponent {
    obs: Observable<string> = new Observable(observer: Observer <string>) => {
	observer.next('dado1');
	observer.next('dado2');
	observer.next('dado3');
	

	let hasError = true;

	if(hasError){
	      observer.error({
		 erro: true,
		 mensagem: 'Deu erro'
	}
	})
}



LINKAR PROJETO COM FIREBASE

i) Criar projeto na internet
https://firebase.google.com/products/realtime-database/?utm_source=google&utm_medium=cpc&utm_campaign=latam-BR-all-pt-dr-SKWS-all-all-trial-e-dr-1011454-LUAC0008679&utm_content=text-ad-none-any-DEV_c-CRE_429626774316-ADGP_Hybrid%20%7C%20SKWS%20-%20EXA%20%7C%20Txt%20~%20Compute_Firebase-KWID_43700066431125567-kwd-312330826250&utm_term=KW_firebase-ST_Firebase&gclid=CjwKCAjwzeqVBhAoEiwAOrEmzSbH-UmApKLIakvhpojkm7fhWJvS-EbfyK7_at8aLNAtASvjNILe9BoCN5YQAvD_BwE&gclsrc=aw.ds


ii) copiar o objeto para adicionar a SDK do Firebase dentro do Angular
const firebaseConfig = {
  apiKey: "AIzaSyBI26JO5IB6Ktu1I_pbzLU6WTkFpTbbDpE",
  authDomain: "soulcode-app-funcionarios.firebaseapp.com",
  projectId: "soulcode-app-funcionarios",
  storageBucket: "soulcode-app-funcionarios.appspot.com",
  messagingSenderId: "985734070952",
  appId: "1:985734070952:web:67c509cf4edb550b61f89d",
  measurementId: "G-08QSPPXK3N"
}

(local: environments.ts)


iii)Criar o storage

iv) no terminal do projeto
npm i firebase @angular/fire

v) importar o módulo do firebase e o modulo do storage no app.module.ts 

import { AngularFireModule } from '@angular/fire/compat/'
import { AngularFireStorageModule } from '@angular/fire/compat/storage';

imports: [
AngularFireModule.initializeApp(environment.firebaseConfig),
AngularFireStorageModule
]



vi)



// CRIAR ROTEAMENTO
app-routing.module.ts

const routes: Routes = [
 {
  path:'',
  loadChildren: () => import("./exemplos/roteamento/roteamento.module").then((m)=>m.RoteamentoModule)
 }
];





INSTALAR PACOTE  DE AUTENTICAÇÃO JWT PARA GERENCIAMENTO DE TOKENS


Site: @auth0/angular-jwt

I: Instalar pelo terminal:
npm i @auth0/angular-jwt

II: importar
import {JwtHelperService} from '@auth0/angular-jwt'



III: criar objeto do import
 private jwt = new JwtHelperService(); // criar objeto que permitirá saber se o token está valido ou não



IV:



V: 












FIREBASE


i) CRIAR PROJETO
ng new angular-todo-app --skip-tests    , ativar o routing (y)


ii) https://lottiefiles.com/ --- imagens com bastantes gifs


iii) criar projeto firebase






COMO CONSUMIR UMA API PUBLICA










PROJETO ANGULAR

listar-cargos.component.html
button linha 7 -- adicionar (click)="abrirFormCargos()"

PROBLEMA DE EXCEÇÃO.


TABELA CARGOS
-Deletar cargos que não existem


-TABELA CHAMADOS
--- organizar GET / POST / PUT / DELETE


