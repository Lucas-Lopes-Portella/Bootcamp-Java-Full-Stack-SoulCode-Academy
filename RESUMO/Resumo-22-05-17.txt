JAVASCRIPT


*OBJETOS
REPRESETAÇÃO DE OBJETO REAL DENTRO DA LINGUAGEM DE PROGRAMAÇÃO


/* 
i) Propriedades/Atributos - caracteristicas dos elementos
ii) Métodos/Funções - rotinas que um objeto pode realizar a partir de algoritmos 
*/

// forma de declarar objeto;
//formato chave:valor
// objeto != array
let pessoa = {
     nome:"Cremilda", // Propriedade
     idade: 65
}

// é possível cirar e acessar objetos dentro de objetos
let pessoa = {
     nome:"Cremilda", // Propriedade
     idade: 65,
     endereco : {
         cidade: 'Rio de Janeiro',
         estado: 'Rio de Janeiro',
         cep: '18151-505'
     }

}

// Sintaxe para chamar objetos
  
i)  console.log(pessoa['idade']);
ii) console.log(pessoa.endereco.estado);



  



CLASSES
Estrutura básica de um objeto (molde)

OBJETOS: parte concreta

//primeira letra maiuscula 
// dentro da classe tem um método construtor, utilizado para criar o objeto dentro da classe

class NomeDaClasse {
	constructor() { // construtor utilizado para criar elementos da classe NomeDaClasse
		this.nome = 'Amanda' // faz referencia a propria classe
		this.idade = 23
		
	}
}


let objetoDaClasse = new NomeDaClasse(); // criação do objeto

console.log(`Olá, ${objetoDaClasse.nome}`)






INSERINDO DADOS DENTRO DA CLASSE 

class Pessoa{
    constructor(nome) { 
		this.nome = nome 
		this.idade = 23
	}
}
let objetoDaClasse = new Pessoa('Lucas');
objetoDaClasse.nome = 'Amanda'
console.log(objetoDaClasse.nome)


//this faz referencia a propria classe




*INTRODUCAO AOS MÉTODOS (funções) em POO, DENTRO DE OBJETOS

     cumprimentar: function() {
        console.log('Olá pessoa');
     }

	OU

     cumprimentar() {
        console.log('Olá pessoa');
     }

chamar método
i) pessoa.cumprimentar();
ii) pessoa['cumprimentar']();

EXEMPLO DE COMPARACAO PARA ENTENDER METODO
funcao afim: f(x) = ax + b // x é o parametro
	    function nomear(nome){
	     }


CLASSE + MÉTODO 

cumprimentar(){
	console.log(`Olá, ${this.nome}` // isso dentro da classe
}

// chamando o metodo fora da classe
let p = new nomeObjeto();
p.cumprimentar();



// métodos estáticos podem ser acessadas sem ter necessariamente uma instacia.

ex: static cumprimentar2() // dentro da classe
{
	instruções	

}

NomeDaClasse.cumprimentar2()  // fora da classe

é possivel acessar as classes em outros arquivos de duas formas, criando dois scripts dentro do index.html e abrindo no navegador ooooou se não for pelo navegador tem que fazer exportando a classe para outro arquivo.js






GITHUB

Criação de conta
Criação de repositório
Commit
Integração com VS code
CRIAÇÃO DE TOKEN -- PERFIL -- DEVELOPER SETTINGS -- PERSONAL ACCESS TOKENS -- GENERATE NEW TOKEN - NOTE -- EXPIRATION -- ATIVAR REPO -- GENERATE TOKEN -- COPIAR TOKEN (SALVAR EM LOCAL SEGURO) -- 








CSS


Continuação Aula 1
CRIAÇÃO DE ID
Importância de criar sites responsivos e com acessibilidade

#paragrafo1{
    color: blue;
    font-size: 20px;
    text-align: center;
    text-decoration: underline;
    font-style: oblique;
    text-transform: capitalize;
    text-indent: 20px; /* paragrafo */
    letter-spacing: 2px;
    word-spacing: 10px;
    line-height: 20px;

}


.minhaDiv{ 
// imagens 
    width: 80%;  /*   recomendado colocar a largura em porcentagem */
    height: 200px;
    background-color: aquamarine;
    background-image: url(../img/soulcode.png);
    background-repeat: no-repeat;
    background-position: bottom center;
    background-size: cover;

// bordas 
    border: 1px solid blue;
    border-style: solid dashed; /* top right bottom left */
    border-width: 10px 2px 5px 15px; /* separa a borda individualmente */
    border-radius: 10px;

// margin e padding

    padding: 20px 15px 10px 5px; /* espaçamento interno */
    margin: 10px; /* espaçamento externo */
    border: 2px dashed black;



}

.botao1:hover{
    background-color: black;
    border: 2px dashed grey;
    color: white;
    padding: 18px;
    cursor:ne-resize
}