JAVASCRIPT

FUNÇÕES
LINGUAGENS QUE TRABALHAM COM PROGRAMACAO FUNCIONAL:
FUNCOES SAO TRATADAS COMO VALOR 

function cumprimentar(){		// funcao sem parametro
    confirm("Confirma ai padrin")
}
cumprimentar();


function cumprimentar2(msg){ 		//funcao com parametro
    alert(msg);	
}
cumprimentar2('Oi');



Dentro do JAVASCRIPT não é obrigatório passar os parametros para a funcao para que o programa rode... porém o valor retornado é UNDEFINED.


function cumprimentar2(msg = 'valor padrao'){	 //funcao com parametro padrao
    alert(msg);
}
cumprimentar2(); // retornado >> valor padrao <<



JUNCAO COM HTML

function criarParagrafo(txt, elemento ='p') {
    document.write(`<${elemento}><strong>${txt}</strong></${elemento}>`);
}

criarParagrafo('document.write converte a string em um elemento HTML', 'h1');
criarParagrafo('document.write converte a string em um elemento HTML', 'h2');
criarParagrafo('document.write converte a string em um elemento HTML', 'h3');



FUNCAO COM RETORNO

 function somar(a,b){
    
    a+b; 
}
let total = somar(5,6);
console.log(total) // retorna undefined
 


function somar(a,b){
    
    return a+b; // o return serve para retornar o valor e nao deixar os valores se perderem dentro da funcao
}
let total = somar(5,6);
console.log(total)  // RETORNA 11



function imc(peso, altura){
    return parseFloat((peso/(Math.pow(altura,2))).toFixed(1))
}
console.log(imc(75,1.66));


exercicio de criar uma funcao do 2 grau
// FORMATO 	 f(x) = ax^2 + bx + c
// DELTA 	 b^2 - 4*a*c
// BHASKARA 	-b +- ((DELTA)**(1/2)) / (2*a)



OBS: 
é possivel retornar mais de um elemento em uma funcao 

ARRAY:
ex: return [x1, x2]

OBJETO 
return {
 x1,
 x2
}




FUNCOES ANONIMAS -- declaradas em variaveis

let subtrair = function(a,b) {
    if (b>a){
        return b-a
    } else {
        return a-b
    }
}
console.log(subtrair(5,2)) // 3









ARROW FUNCTIONS --- (SÃO FUNCOES ANONIMAS)

//declacacao para mais de um parametro
let sub = (a,b) => {   
    if (b>a){
        return b-a
    } else {
        return a-b
    }
}
console.log(sub(5,2)) //3


//declacacao mais reduzida com mais de um parametro
let sub2 = (a,b) => a+b
console.log(sub2(3,2))


//declacacao sem parametro
let sub2 = (a,b) => a+b
let sub3 = () => 5

//declacacao um parametro
let sub4 = umParametro => umParametro * 2











CSS 






/* 

as folhas de estilo são lidas de cima para baixo. 


display --> serve para organizar os componentes dentro da página. Ex: um ao lado do outro.
VALOR: 
- block: especifica que o elemento vai ocupar a linha inteira.
Elementos que se comportam, por padrão, como bloco. Quebra linha no final do elemento. div; titulos; paragrafos; form; header; section; article; aside; nav; footer.

- inline: especifica que o elemento não ocupa a linha inteira. Ocupa apenas o espaço do proprio elemento. Não há quebra de linha ao final do elemento. a; img; span

- inline-block:  permite alterar a altura, largura e margem de um elemento, diferente do display: inline

- flex: possibulita flexibilidade para posicionar os elementos */

.emBloco{

    /* display: block --> padrão */
    background-color: blue;
    color: antiquewhite;
}

.emLinha{
    background-color: violet;
    color: darkblue;
}

.blocoEmLinha{
    display: inline;
}

li{
    display: inline-block;
    background-color: black;
    color: goldenrod;
    font-weight: bolder;
    text-align: center;
    /* 
    as propriedades de altura, largura e margem não funcionam quando o elemento tem a propriedade display como inline. Precisa ser inline-block*/
   
    width: 100px;
    height: 50px;  
    
}

.botao{
    /* display: inline-block; */
    display: flex;
    margin-left: auto;
    margin-right: auto;
    justify-content: center;
    background-color: rgb(0, 89, 255);
    color: white;
    border-radius: 10px;
    padding: 5px;
    text-decoration: none;
    font-weight: 800;
    height: 50px;
    width: 50%;
    line-height: 50px;


    
}

.vermelho{
    
    background-color: red;
    color: white;
}
.verde{
   
    background-color: green;
    color: white;
}
.verde:hover{
/* display: none; */
visibility: hidden;
}
.azul{
    
    background-color: blue;
    color: white;
}

.todasDivs{
    display: inline-block;
    width: 200px;
    height: 50%;
}








